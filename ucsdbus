#!/usr/bin/python2.7
from bs4 import BeautifulSoup
import urllib
import os
import argparse

def levenshtein(s1, s2):
    if len(s1) < len(s2):
        return levenshtein(s2, s1)

    if len(s2) == 0:
        return len(s1)

    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer
            deletions = current_row[j] + 1       # than s2
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row

    return previous_row[-1]

def isInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

parser = argparse.ArgumentParser()
parser.add_argument("-r", "--route", help="route for the bus", type=str)
parser.add_argument("-s", "--stop", help="stop for the bus", type=str)

args = parser.parse_args()
routeSet = False
stopSet = False
firstAttempt = False

if args.route != None:
    routeSet = True
    firstAttempt = True
if args.stop != None:
    stopSet = True

secondAttempt = False


mainSite = "http://ucsdbus.com"
f = urllib.urlopen(mainSite + "/simple/routes")
soup = BeautifulSoup(f)
os.system('clear')

while True:
    items = list(enumerate(soup.find_all('li')))

    if firstAttempt or secondAttempt:
        searchWith = args.route if firstAttempt else args.stop
        score = 10000
        lowIndex = -1
        for index, item in items:
            newScore = levenshtein(item.get_text(), searchWith)
            if searchWith.lower() in item.get_text().lower():
                newScore = 0 #accept as choice if substring
            if newScore < score:
                score = newScore
                lowIndex = index

        rawInput = lowIndex
        firstAttempt = False
        if secondAttempt:
            secondAttempt = False
        else:
            if stopSet:
                secondAttempt = True

    else:
        for i, entry in items:
            print("%d.\t%s" % (i, entry.get_text().strip('\r\n')))
        rawInput = raw_input("Choice (q to quit): ")
        if rawInput == "q":
            break

    os.system('clear')

    if not isInt(rawInput):
        print("Please enter a valid number.")
        continue

    inputItem = int(rawInput)
    if inputItem >= len(items) or inputItem < 0:
        print("Please choose a valid option.")
        continue

    _, choice = items[inputItem]

    print("You chose: %s" % choice.get_text().strip('\r\n'))

    f = urllib.urlopen(mainSite + choice.find('a')['href'])
    soup = BeautifulSoup(f)
